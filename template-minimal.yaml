AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'no-wing - Minimal Infrastructure (No GitHub Integration)'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Deployment environment
  
  MonthlyCostLimit:
    Type: Number
    Default: 500
    Description: Monthly cost limit in USD for budget alerts

  AdminEmail:
    Type: String
    Default: admin@example.com
    Description: Email address for budget and security alerts

Globals:
  Function:
    Timeout: 300
    MemorySize: 512
    Runtime: nodejs18.x
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        LOG_LEVEL: info

Resources:
  # ============================================================================
  # IAM ROLES AND POLICIES
  # ============================================================================
  
  # Master Orchestrator Role (Q's boss)
  NoWingOrchestratorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'NoWingOrchestratorRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: NoWingOrchestratorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # IAM permissions to manage Q roles
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:GetRole
                  - iam:ListRoles
                  - iam:PassRole
                  - iam:TagRole
                  - iam:UntagRole
                Resource: 
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/NoWingQ*'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/NoWingDev*'
              # CloudWatch Logs
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/no-wing/*'
      Tags:
        - Key: NoWingComponent
          Value: orchestrator
        - Key: Environment
          Value: !Ref Environment

  # Q Permission Boundary (Prevents privilege escalation)
  NoWingQPermissionBoundary:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'NoWingQPermissionBoundary-${Environment}'
      Description: 'Permission boundary for Q agents to prevent privilege escalation'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Deny dangerous actions
          - Effect: Deny
            Action:
              - iam:CreateUser
              - iam:DeleteUser
              - iam:CreatePolicy
              - iam:DeletePolicy
              - iam:PutUserPolicy
              - iam:AttachUserPolicy
              - iam:CreateAccessKey
              - iam:DeleteAccessKey
              - iam:UpdateAccessKey
              - organizations:*
              - account:*
              - billing:*
              - budgets:*
              - support:*
              - route53:*
              - cloudformation:DeleteStack
              - cloudformation:UpdateStack
            Resource: '*'
          # Deny modifying no-wing core infrastructure
          - Effect: Deny
            Action: '*'
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/NoWing*'
              - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:no-wing-*'
            Condition:
              StringNotEquals:
                'aws:PrincipalTag/NoWingComponent': 'q-agent'
          # Allow everything else within region and resource constraints
          - Effect: Allow
            Action: '*'
            Resource: '*'
            Condition:
              StringLike:
                'aws:RequestedRegion': 
                  - !Ref AWS::Region
                  - 'us-east-1'  # Global services

  # Base Q Role Template
  NoWingQBaseRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'NoWingQBaseRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt NoWingOrchestratorRole.Arn
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'sts:ExternalId': 'no-wing-q-agent'
      PermissionsBoundary: !Ref NoWingQPermissionBoundary
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: NoWingQExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Lambda permissions with resource limits
              - Effect: Allow
                Action:
                  - lambda:CreateFunction
                  - lambda:UpdateFunctionConfiguration
                  - lambda:GetFunction
                  - lambda:ListFunctions
                  - lambda:DeleteFunction
                  - lambda:InvokeFunction
                Resource: '*'
                Condition:
                  StringEquals:
                    'aws:RequestedRegion': !Ref AWS::Region
                  NumericLessThan:
                    'lambda:FunctionMemorySize': '1024'  # Max 1GB memory
                  StringLike:
                    'lambda:FunctionName': 'q-*'  # Only Q-prefixed functions
              # IAM permissions for Lambda roles
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:GetRole
                  - iam:PassRole
                  - iam:TagRole
                Resource: 
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/q-*'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/*-role'
              # CloudWatch Logs permissions
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/no-wing/*'
              # S3 permissions
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:PutBucketPolicy
                  - s3:GetBucketLocation
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub 'arn:aws:s3:::q-*-${AWS::AccountId}-*'
                  - !Sub 'arn:aws:s3:::q-*-${AWS::AccountId}-*/*'
              # STS permissions for account info
              - Effect: Allow
                Action:
                  - sts:GetCallerIdentity
                Resource: '*'
      Tags:
        - Key: NoWingComponent
          Value: q-base-role
        - Key: Environment
          Value: !Ref Environment

  # ============================================================================
  # LAMBDA FUNCTIONS
  # ============================================================================

  # Main Orchestrator Function
  NoWingOrchestratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'no-wing-orchestrator-${Environment}'
      CodeUri: dist/
      Handler: lambda/orchestrator.handler
      Role: !GetAtt NoWingOrchestratorRole.Arn
      Environment:
        Variables:
          Q_BASE_ROLE_ARN: !GetAtt NoWingQBaseRole.Arn
          Q_PERMISSION_BOUNDARY_ARN: !Ref NoWingQPermissionBoundary
          ENVIRONMENT: !Ref Environment
      Tags:
        NoWingComponent: orchestrator
        Environment: !Ref Environment

  # Demo Lambda Function (for Q interaction testing)
  NoWingDemoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'no-wing-demo-function-${Environment}'
      CodeUri: dist/
      Handler: lambda/demo-function.handler
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
      Tags:
        NoWingComponent: demo
        Environment: !Ref Environment

  # ============================================================================
  # CLOUDWATCH LOGS
  # ============================================================================

  NoWingOrchestratorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/no-wing-orchestrator-${Environment}'
      RetentionInDays: 30
      Tags:
        - Key: NoWingComponent
          Value: orchestrator-logs
        - Key: Environment
          Value: !Ref Environment

  NoWingQActivitiesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/no-wing/q-activities-${Environment}'
      RetentionInDays: 90
      Tags:
        - Key: NoWingComponent
          Value: q-activities-logs
        - Key: Environment
          Value: !Ref Environment

  # ============================================================================
  # BUDGETS AND COST CONTROL
  # ============================================================================

  NoWingCostBudget:
    Type: AWS::Budgets::Budget
    Properties:
      Budget:
        BudgetName: !Sub 'NoWingMonthlyCost-${Environment}'
        BudgetLimit:
          Amount: !Ref MonthlyCostLimit
          Unit: USD
        TimeUnit: MONTHLY
        BudgetType: COST
      NotificationsWithSubscribers:
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: 80
            ThresholdType: PERCENTAGE
          Subscribers:
            - SubscriptionType: EMAIL
              Address: !Ref AdminEmail

Outputs:
  OrchestratorFunctionArn:
    Description: 'ARN of the no-wing orchestrator function'
    Value: !GetAtt NoWingOrchestratorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-OrchestratorArn'

  QBaseRoleArn:
    Description: 'ARN of the Q base role template'
    Value: !GetAtt NoWingQBaseRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-QBaseRoleArn'
