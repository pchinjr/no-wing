/**
 * Q-Created Lambda Function
 * Generated by no-wing AI development framework
 */

exports.handler = async (event, context) => {
    console.log('ü§ñ Q-created Lambda function invoked');
    console.log('Event:', JSON.stringify(event, null, 2));
    console.log('Context:', JSON.stringify(context, null, 2));
    
    // Get environment variables set by Q
    const environment = process.env.ENVIRONMENT || 'dev';
    const qIdentity = process.env.Q_IDENTITY || 'unknown';
    const functionPurpose = process.env.FUNCTION_PURPOSE || 'General purpose function';
    const createdBy = process.env.CREATED_BY || 'Q-Agent';
    
    try {
        // Basic function logic - can be customized based on purpose
        const response = {
            statusCode: 200,
            headers: {
                'Content-Type': 'application/json',
                'X-Created-By': createdBy,
                'X-Q-Identity': qIdentity
            },
            body: JSON.stringify({
                message: 'Hello from Q-created Lambda function!',
                purpose: functionPurpose,
                environment: environment,
                qIdentity: qIdentity,
                timestamp: new Date().toISOString(),
                requestId: context.awsRequestId,
                functionName: context.functionName,
                functionVersion: context.functionVersion,
                memoryLimitInMB: context.memoryLimitInMB,
                remainingTimeInMillis: context.getRemainingTimeInMillis(),
                event: event
            })
        };
        
        console.log('‚úÖ Function executed successfully');
        return response;
        
    } catch (error) {
        console.error('‚ùå Function execution failed:', error);
        
        return {
            statusCode: 500,
            headers: {
                'Content-Type': 'application/json',
                'X-Created-By': createdBy,
                'X-Q-Identity': qIdentity
            },
            body: JSON.stringify({
                error: 'Internal server error',
                message: error.message,
                qIdentity: qIdentity,
                timestamp: new Date().toISOString(),
                requestId: context.awsRequestId
            })
        };
    }
};
