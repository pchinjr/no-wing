AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Q-created Lambda function with proper IaC'

Parameters:
  FunctionName:
    Type: String
    Description: Name of the Lambda function
    Default: q-lambda-function
  
  FunctionDescription:
    Type: String
    Description: Description of the Lambda function
    Default: Function created by Q AI agent
  
  Runtime:
    Type: String
    Description: Lambda runtime
    Default: nodejs18.x
    AllowedValues:
      - nodejs18.x
      - nodejs20.x
      - python3.9
      - python3.10
      - python3.11
  
  MemorySize:
    Type: Number
    Description: Memory size in MB
    Default: 256
    MinValue: 128
    MaxValue: 10240
  
  Timeout:
    Type: Number
    Description: Timeout in seconds
    Default: 30
    MinValue: 1
    MaxValue: 900
  
  Environment:
    Type: String
    Description: Environment (dev, staging, prod)
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
  
  QIdentity:
    Type: String
    Description: Q agent identity
    Default: q-agent

Globals:
  Function:
    Timeout: !Ref Timeout
    MemorySize: !Ref MemorySize
    Runtime: !Ref Runtime
    Architectures:
      - x86_64
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        LOG_LEVEL: info
        Q_IDENTITY: !Ref QIdentity

Resources:
  # Lambda Function
  QFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref FunctionName
      Description: !Ref FunctionDescription
      CodeUri: ../src/lambda/q-functions/
      Handler: index.handler
      Environment:
        Variables:
          FUNCTION_PURPOSE: !Ref FunctionDescription
          CREATED_BY: !Sub 'Q-Agent-${QIdentity}'
          DEPLOYMENT_TIME: !Sub '${AWS::StackName}-${AWS::Region}'
      Events:
        # Optional API Gateway trigger
        ApiEvent:
          Type: Api
          Properties:
            Path: /invoke
            Method: post
            RestApiId: !Ref QFunctionApi
      Tags:
        CreatedBy: Q-Agent
        Environment: !Ref Environment
        ManagedBy: no-wing
        QIdentity: !Ref QIdentity

  # API Gateway for the function
  QFunctionApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Description: !Sub 'API for ${FunctionName}'
      Tags:
        CreatedBy: Q-Agent
        Environment: !Ref Environment
        ManagedBy: no-wing

  # CloudWatch Log Group with retention
  QFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FunctionName}'
      RetentionInDays: 14
      Tags:
        - Key: CreatedBy
          Value: Q-Agent
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: no-wing

  # IAM Role for the function
  QFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${FunctionName}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: QFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}*'
      Tags:
        - Key: CreatedBy
          Value: Q-Agent
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: no-wing

Outputs:
  FunctionName:
    Description: Name of the created Lambda function
    Value: !Ref QFunction
    Export:
      Name: !Sub '${AWS::StackName}-FunctionName'
  
  FunctionArn:
    Description: ARN of the created Lambda function
    Value: !GetAtt QFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-FunctionArn'
  
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${QFunctionApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/invoke'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'
  
  RoleArn:
    Description: ARN of the Lambda execution role
    Value: !GetAtt QFunctionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-RoleArn'
